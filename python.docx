PYTHON:  

It is a popular programming language. It was created by Guido van Rossum, in the year 1991. 

Web development (server side). 

software development, 

system scripting. 

  

What python can do? 

 Python can be used on a server for creating the web application. 

Used to create the workflow of software development. 

Python can handle big data and complex mathematical operations. 

  

why we choose python? 

It works on different platform like windows, Linux, mac, Rasbery, etc. 

Python has a very simple syntax even beginners can easily understand. 

Allows developers to write the program in few lines. 

  

JAVA: 

program to print hello world. 

class example {. 

public static void main (string args[]) { 

system. out. print] n ("Hello World"); 

} 

} 

PYTHON: 

program to print hello world 

print("Hello World!”) 

 

Python comments: comment lines. 

--> Comments are used to explain the code that you have written. 

--> Comments can be used to prevent execution when testing. 

creating a comment: 

#hi hello 

#Do u have any idea 

#Suggest something! 

Variables: 

Used to assign some values or content. 

Ex: 

 a =10, 

b =100, 

c = a +b 

 

name = "Tahsin"# This is a sample Python script. 
print("Name:",name) 
age = 24 
print("Age:",age) 
height = 5.2 
print("Height:",height) 
is_student = True 
print("is_student:",is_student) 

 

Output: 

Name: Tahsin 

Age: 24 

Height: 5.2 

is_student: True 

 

Data types:  Type of data including in our code. 

Example: 10 - integer unit 

                      ABC – String – str 

                      10.50 - float 

                       a+ib = complex  

                       010110 – byte. 

Explain about variables?  

In python a variable is a named storage location that holds data values, allowing you to store and manipulate information within your code. You create a variable by assigning a value to it using the assignment operator (=). 

Variable names: 

      Variables name can contain letters, numbers and underscores, but they must start with a letter or underscore. 

List the data types:  

Pythons built in data types can be broadly categorized into: Numeric (integers, floats, complex), Sequence (strings, lists, tubules) Set mapping (Dictionaries), Boolean, and none. 

Integers: whole numbers (e.g., age = 25) 

Floats: Numbers with decimal point (e.g., price = 19.99) 

Strings: Text enclosed in quotes (e.g., name = “Python” or message = ‘hello world’!) 

Booleans: true or false values (e.g., is active = True) 

Lists: ordered collections of items (e.g., numbers = 1,2,3) 

Dictionaries: Key-value pairs (e.g., person = {“name”: “Alice”, “age”: 25})  

     010110 – byte 

 

name="abc" 
print("name:", name) 
print("type of name:",type(name)) 
 
age=23 
print("age:", age) 
print("type of age:", type(age)) 
 
height=5.8 
print("height:", height) 
print("type of a height:",type(height)) 
 
is_student=True 
print("is_student:", is_student) 
print("type of is_student:", type(is_student)) 
 
unique_numbers={1,2,3,4} 
print("unique_numbers:", unique_numbers) 
print("type of a unique_numbers:", type(unique_numbers)) 
 
fruits=("apple","orange","kivi") 
print("fruits:", fruits) 
print("type of a fruits:", type(fruits)) 
 
flowers=("rose","tulip","lily") 
print("flowers:", flowers) 
print("type of a flowers:", type(flowers)) 
 

Output: 

name: abc  ;type of name: <class 'str'>  

age: 23 ;type of age: <class 'int'>  

height: 5.8; type of a height: <class 'float'> 

is_student: True; type of is_student: <class 'bool'> 

unique_numbers: {1, 2, 3, 4}; type of a unique_numbers: <class 'set'>  

fruits: ('apple', 'orange', 'kivi'); type of a fruits: <class 'tuple'>  

flowers: ('rose', 'tulip', 'lily'); type of a flowers: <class 'tuple'> 

Process finished with exit code 0 

 

Advantages and applications of python programming over other programming language? 

 

OPERATORS: 

Arithmetic operator, 

Logical Operators, 

Comparison Operators, 

Assignment Operators, 

Identity Operators, 

Membership Operators, 

Bitwise Operators, 

  

ARITHMETIC OPERATORS:  Performs Arithmetic operations. 

Addition, 

Subtraction 

Multiplication 

Division 

Modulus 

Floor Division 

 

ADDITION: to add two numbers, 

Example: 

program:  a=25 

 	       b=50 

       sum = a+b 

       Print(“sum of two numbers is:”, sum) 

      OUTPUT: 75 

 

a=15 
b=10 
sum=a+b 
print("sum of two numbers is:", sum) 
 
a=18 
b=23 
sum=a+b 
print("sum of two numbers is:", sum) 
 
a=23 
b=34 
sum=a+b 
print("sum of two numbers is:", sum) 
 
a=16 
b=42 
sum=a+b 
print("sum of two numbers is:", sum) 
 
a=57 
b=63 
sum=a+b 
print("sum of two numbers is:", sum) 

 

  

OUTPUT: 

sum of two numbers is: 25, 

sum of two numbers is: 41 

sum of two numbers is: 57 

sum of two numbers is: 58 

sum of two numbers is: 120 

Process finished with exit code 0 

 

SUBTRACTION: Difference  

Example: 

Program: a=50 

      b=25 

      difference=a-b  

     print(“difference of two numbers is:”, difference) 

     OUTPUT: 25 

a=22 
b=12 
diff=a-b 
print("difference of two numbers is:", diff) 
 
a=236 
b=52 
diff=a-b 
print("difference of two numbers is:", diff) 
 
a=48 
b=24 
diff=a-b 
print("difference of two numbers is:", diff) 
 
a=69 
b=54 
diff=a-b 
print("difference of two numbers is:", diff) 
 
a=80 
b=20 
diff=a-b 
print("difference of two numbers is:", diff) 

OUTPUT: 

Picture 254517157, Picture 

Process finished with exit code 0 

 

 

MULTIPLICATION: Product 

Example:  

Program: a=2 

       	      b=50 

      	      Prod= a*b 

     	       print(“product of two numbers is:”, prod)  

     	       OUTPUT: 100 

a=22 
b=12 
prod=a*b 
print("product of two numbers is:", prod) 
 
a=5 
b=6 
prod=a*b 
print("product of two numbers is:", prod) 
 
a=64 
b=22 
prod=a*b 
print("product of two numbers is:", prod) 
 
a=65 
b=3 
prod=a*b 
print("product of two numbers is:", prod) 
 
 
a=48 
b=12 
prod=a*b 
print("product of two numbers is:", prod) 

 

OUTPUT: 

Picture 1886729492, Picture 

Process finished with exit code 0 

 

DIVISION:  

Example: 

Program: a=250 

      b=50 

      	      Div= a/b 

      print(“division of two numbers is:”, Div ) 

a=26 
b=12 
Div=a/b 
print("division of two numbers is:", Div) 
 
x=24 
y=2 
Div=x/y 
print("division of two numbers is:", Div) 
 
apple=300 
labours=70 
Div=apple/labours 
print("division of two numbers is:", Div) 
 
donuts=12 
friends=3 
Div=donuts/friends 
print("division of two numbers is:", Div) 
 
a=32 
d=15 
Div=a/d 
print("division of two numbers is:", Div) 
 

 

 

OUTPUT: 

Picture 1833149718, Picture 

Process finished with exit code 0  

MODULUS:  Gives the value of remainder 

 Example:											  Program: a=250,											      b=50												      Mod=a %b												      Print(“Modulus of two numbers is:” Mod)						      Output: Modulus of two numbers is:”, Mod) 

a=50 
b=15 
Mod=a%b 
print("modulus of two numbers is:", Mod) 
 
x=250 
y=50 
Mod=x%y 
print("modulus of two numbers is:", Mod) 
 
g=22 
h=12 
Mod=g%h 
print("modulus of two numbers is:", Mod) 
 
chem=43 
maths=40 
Mod=chem%maths 
print("modulus of two numbers is:", Mod) 
 
water=60 
juice=46 
Mod=water%juice 
print("modulus of two numbers is:", Mod) 

OUTPUT:  

Picture 174595873, Picture 

Process finished with exit code 0 

 

FLOOR DIVISION (//)  :  Gives quotient of integer. 

Example: 

Program: a=250,											      b=50											    	         floor=a//b,											     Print(“Floor division of two numbers is:”, floor).					     Output: Floor division of two numbers is: 5) 

a=30 
b=50 
floor=a//b 
print("floor division of two numbers is:", floor) 
 
c=200 
d=50 
floor=c//d 
print("floor division of two numbers is:", floor) 
 
e=47 
f=5 
floor=e//f 
print("floor division of two numbers is:", floor) 
 
g=36 
h=12 
floor=g//h 
print("floor division of two numbers is:", floor) 
 
i=13 
j=5 
floor=i//j 
print("floor division of two numbers is:", floor) 
 
 

 

OUTPUT: 

Picture 1603121335, Picture 

Process finished with exit code 0 

 

2. LOGICAL OPERATORS: 

AND OPERATOR, 

OR OPERATOR 

NOT OPERATOR. 

1. And operator: Returns true if both the statements are true. 

a		b		y 

TRUE		TRUE		TRUE 

TRUE		FALSE		FALSE	 

FALSE		TRUE		FALSE	 

FALSE		FALSE		FALSE	 

Program: a=5				a=5 

      print(a>1 and a<4),	print(a>1 and a<10): 

      output: false;		output: true 

      a=5 
print(a>1 and a<4), 
a=5 
print(a>1 and a<10) 
 
w=10 
print(w>9 and w<11) 
 
t=24 
print(t>22 and t<25 ) 
 
x=40 
print(x>42 and x<42 ) 

 

OUTPUT: 

Picture 585199023, Picture 

Process finished with exit code 0 

2. OR OPERATOR: Returns true if any of the statement is true. 

a		b		y 

TRUE		TRUE		TRUE 

TRUE		FALSE		TRUE 

FALSE		TRUE		TRUE 

FALSE		FALSE		FALSE 

 

 Program: a=5 

      print(a>6 or a<4) 

      output: true 

 

a=40 
print(a>48 or a<35) 
 
g=26 
print(g>22 or g<28) 
 
d=65 
print(d>63 or d<63) 
 
t=65 
print(t>66 or t<60) 
 
h=620 
print(h>652 or h<628) 

OUTPUT:  

Picture 251498007, Picture 

Process finished with exit code 0 

3. NOT OPERATOR: Reverses the result. 

a		y 

TRUE		FALSE		 

FALSE		TRUE 

      Program: a=5 

                   print(not(a>6 or a<4)) 

            Output: True 

 a=26 
print(not(a>28 or a<22)) 
 
a=450 
print(not(a>427 or a<422)) 
 
ad=642 
print(not(ad>628 or ad<615)) 
 
xy=15 
print(not(xy>28 or xy<22)) 
 
uv=8 
print(not(uv>10 or uv<5)) 

OUTPUT: 

Picture 528440742, Picture  

Process finished with exit code 0 

COMPARISION: Used to compare two values. 

Equal to: (==) 

Not Equal to: (!=) 

Greater Than: (>) 

Less Than: (<) 

Greater Than Equals To: (>=) 

Less Than Equals to:  (<=) 

 

Equal to: (==) 

Program: a=10 

      b=10 

      print(a==b) 

OUTPUT: True 

a=13 
b=13 
print(a==b) 
 
apple=28 
mango=28 
print(apple==mango) 
 
glass=12 
bottles=12 
print(glass==bottles) 
 
x=37 
y=37 
print(x==y) 
 
t=37 
s=37 
print(t==s) 

 

OUTPUT:  

Picture 4262410, Picture 

 

Not Equal To: != 

Program: a=10 

      b=10 

      print(a!=b) 

OUTPUT: False 

a=18 
b=18 
print(a!=b) 
 
a=25 
b=14 
print(a!=b) 
 
x=35 
y=32 
print(a!=b) 
 
rose=10 
flowers=15 
print(rose!=flowers) 
 
apple=200 
mango=300 
print(apple!=mango) 
 

OUTPUT: 

Picture 2085518304, Picture 

Greater Than: > - highest value. 

Program: a=100 

      b=10 

      print(a>b) 

OUTPUT: True 

a=95 
b=84 
print(a>b) 
 
a=38 
b=54 
print(a>b) 
 
x=38 
y=28 
print(x>y) 
 
r=476 
s=52 
print(r>s) 
 
u=64 
v=52 
print(u>v) 

 

 

 

 

 

 

OUTPUT: 

Picture 1438669515, Picture 

 

Less Than: <- least value. 

Program: a=100 

      b=10 

      print(a<b) 

OUTPUT: False 

a=540 
b=432 
print(a<b) 
 
e=20 
f=22 
print(e<f) 
 
q=12 
r=23 
print(q<r) 
 
m=258 
n=260 
print(m<n) 

 

OUTPUT: 

Picture 1666932505, Picture 

 

Greater Than Equals To: >= -Verifies two numbers in two different condition. 

`PROGRAM:   a=100 

b=10 

print(a>=b) 

output: True 

a=28 
b=12 
print(a>=b) 
 
x=15 
y=19 
print(x>=y) 
 
r=24 
s=24 
print(r>=s) 
 
e=228 
f=200 
print(e>=f) 
 
m=350 
n=250 
print(m>=n) 

OUTPUT:  

Picture 612924148, Picture 

Less Than Equals to: <= - verifies two different numbers in two different condition. 

PROGRAM:     a=100 

b=10 

Print(a<=b) 

Output: false 

a=46 
b=39 
print(a<=b) 
 
t=65 
u=65 
print(t<=u) 
 
k=68 
l=70 
print(k<=l) 
 
h=40 
i=50 
print(h<=i) 
 
w=130 
x=120 
print(w<=x) 

OUTPUT:  

Picture 1851264991, Picture 

ASSIGNMENT OPERATOR: 

=    

PROGRAM: 

a=10 

b=50 

c=60 

Print(a,b,c) 

Output: 10,50,60 

a=10 
b=20 
c=30 
print(a,b,c) 
 
apple=12 
mango=15 
print(a,b) 
 
e=23 
f=14 
g=16 
print(e,f,g) 
x=86 
y=75 
z=65 
print(x,y,z) 
 
students=40 
staff=20 
books=50 
print(students,staff,books) 
 
 

 OUTPUT:  

Picture 1008654656, Picture 

+= 

PROGRAM: 

a=10 

a+=2 

print(a) 

a=38 
a+=49 
print(a) 
 
x=90 
x+=10 
print(x) 
 
y=15 
y+=25 
print(y) 
 
s=48 
s+=65 
print(s)	 

 

 

 

 

OUTPUT: 

Picture 114462874, Picture 

-= 

Program:     

a=10 

a-= 

print(a) 

output: 8 

m=54 
m-=34 
print(m) 
 
h=37 
h-=75 
print(m) 
 
r=86 
r-=43 
print(r) 
 
y=436 
y-=75 
print(y) 
 
d=64 
d-=60 
print(d) 

OUTPUT: 

Picture 947606511, Picture 

 

 

*=  

 Program: 

a=10 

a*=5 

print(a) 

a=20 
a*=12 
print(a) 
 
m=40 
m*=22 
print(m) 
 
d=29 
d*=3 
print(d) 
 
h=16 
h*=12 
print(h) 
 
j=20 
j*=12 
print(j) 
 

OUTPUT: 

Picture 113611053, Picture 

/=  

Program: 

a=10 

a/=5 

print(a) 

output:2.0 

g=85 
g/=5 
print(g) 
 
h=200 
h/=5 
print(h) 
 
i=854 
i/=14 
print(i) 
 
j=227 
j/=32 
print(j) 
 
k=46 
k/=5 
print(k) 

OUTPUT: 

Picture 1956732217, Picture 

%= 

Program: 

a=10 

a%=5 

Print(a) 

Output:0 

a=25 
a%=5 
print(a) 
 
b=20 
b%=5 
print(b) 
 
c=32 
c%=10 
print(c) 
 
d=32 
d%=10 
print(d) 
 
f=12 
f%=10 
print(f) 
 

OUTPUT: 

Picture 402499202, Picture 

//= 

Program: 

a=10 

a//=5 

print(a) 

output:2 

a=43 
a//=5 
print(a) 
 
m=46 
m//=34 
print(m) 
 
h=94 
h//=23 
print(h) 
 
i=45 
i//=34 
print(i) 
 
n=20 
n//=14 
print(n) 

OUTPUT: 

Picture 1036312519, Picture 

&=    BITWISE OPERATOR: 

Program: 

a=10 

a&=5 

print(a) 

output:0 

a=20 
a&=4 
print(a) 
 
l=280 
l&=4 
print(l) 
 
h=45 
h&=20 
print(h) 
 
j=34 
j&=30 
print(j) 
 
m=20 
m&=14 
print(m) 

OUTPUT:  

Picture 777991187, Picture 

|= - Bitwise OR Operator:  

Program; 

a=10 

a|=5 

print(a) 

output:15 

h=100 
h|=15 
print(h) 
 
i=15 
i|=5 
print(i) 
 
j=156 
j|=55 
print(j) 
 
k=68 
k|=22 
print(k) 
 
l=75 
l|=24 
print(l) 

OUTPUT:  

Picture 710471112, Picture 

Example: 2-010 

1-001 

3-011 

 

^=h  -BITWISE NOT OPERATOR 

Program: 

a=10 

a^=5 

print(a) 

output:1 

 

>>= 

<<= 

:= 

 

IDENTITY OPERATOR: used to compare the objects. 

 IS: Return True if both are same. 

a = “apple”  

b= “mango” 

Print (a is b) 

Output: false. 

a="tomato" 
b="mango" 
print(a is b) 
 
x="orange" 
y="orange" 
print(x is y) 
 
 
p=2 
q=2 
r=3 
print(p is q) 
print(q is r) 
print(r is p) 

OUTPUT: 

Picture 320668367, Picture 

IS NOT: Returns true if both are not same. 

a= apple 

b=mango 

Print (a is not b) 

Output: True. 

a=[23,24,25] 
b=[40.41,42] 
print(a is not b) 
 
x=["apple","mango","orange"] 
y=["apple","mango","orange"] 
z=["tomato","kiwi","chiku"] 
print(x is not y) 
print(x is not z) 
print(z is not x) 
print(y is not z) 

OUTPUT: 

Picture 145473004, Picture 

 

MEMBERSHIP OPERATOR: Used to test the sequence is present: 

IN:  

a= ["apple”, “mango”, “banana”] 

b= “mango” 

Print (b in a) 

Output: True. 

a=["science","social","english"] 
b="social" 
print(b in a) 
 
x=["mango","lemon","apple"] 
y="orange" 
print(y in x) 
 
p=["34","35","36"] 
q=["39","34","32"] 
r="34" 
print(q in p) 
print(r in p) 
print(r in q) 

OUTPUT: 

Picture 1698137687, Picture 

NOT IN:  

a= ["apple”, “mango”, “banana”] 

b= “kiwi” 

Print (b not in a) 

Output: True. 

x=["12","22","32"] 
y="42" 
print(y not in x) 
 
m=["46","22","68"] 
n="46" 
print(n not in m) 
 
p=["10","20","30"] 
q="42" 
print(q not in p) 
 
a=["126","622","562"] 
b="657" 
print(b not in a) 
 
h=["apple","mango"] 
i="orange" 
print(i not in h) 

OUTPUT: 

Picture 1402258468, Picture 

 

 

BITWISE OPERATORS: Used to compare binary numbers. 

AND-&: sets each bit one if both the bits are one. 

EXAMPLE:  

Print(6&3) 

Output: 2  

ANALYSIS: 6 – 0110 

         3 – 0011 

         ----------- 

         2 – 0010 

         ----------- 

print(6&3) 
print(25&25) 
print(3&4) 
print(3&5) 
print(12&17) 

OUTPUT:  

Picture 2128643648, Picture 

OR-| : Sets each bit to one if one of the two bits is one. 

EXAMPLE:  

Print(6 0r 3) 

Output: 7  

Analysis: 6 – 0110 

     3 – 0011 

     ----------- 

     7 – 0111 

     ----------- 

print(6|3) 
 
print(15|8) 
 
print(200|150) 
 
print(132|12) 
 
print(232|236) 
 

OUTPUT: 

Picture 629931200, Picture 

XOR - ^ : sets each bit to 1 if one of the two bits is bit (1) 

EAXMPLE: 

print(6^3) 

Output: 5 

Analysis: 6 – 0110 

     3 – 0011 

     ----------- 

     5 – 0101 

     ----------- 

print(5^2) 
 
print(26^12) 
 
print(15^13) 
 
print(16^13) 
 
print(28^22) 
 

OUTPUT:  

Picture 1709886942, Picture 

NOT - ~ : inverts all the bits. 

EAXMPLE: 

print(~3) 

Output: 4 

Analysis: 3 – 0000 0000 0000 0011 

     4 – 1111 1111 1111  1100 

print(~2) 
 
print(~5) 
 
print(~3) 
 
print(~260) 
 
print(~32) 

OUTPUT:  

Picture 1360893156, Picture 

Left shift - << : It will push zeroes from right side to the left side. 

EAXMPLE: 

print(3<<2) 

Output: 12 

Analysis: 3 – 0000 0000 0000 0011 

     2 – 0000 000 0000 1100 

print(3<<2) 
 
print(23<<2) 
 
print(20<<5) 
 
print(76<<3) 
 
print(8<<4) 

OUTPUT: 

 

Picture 15676821, Picture 

Right shift - >> : It will push zeroes from left side to the right side. 

EAXMPLE: 

print(8>>2) 

Output: 2 

Analysis: 8 – 0000 0000 0000 1000 

     	      2 – 0000 0000 0000 0010 

print(8>>2) 
 
print(24>>15) 
 
print(4>>2) 
 
print(12>>1) 
 
print(16>>26) 

OUTPUT: 

Picture 918001162, Picture 

 

PRESISDENCE ORDER: 

( ) - PARATHESIS 

** - EXPONENTIAL 

(+*) - (-*) - (~*): UNIRAY PLUS, UNIRAY MINUS, BITWISE NOT. 

*, /, //, % 

<<, >> - BITWISE LEFT AND RIGHT 

& - BITWISE AND 

^ - BITWISE XOR 

| - BITWISE OR  

COMPARISION, MEMBERSHIP, IDENTITY. 

LOGICAL OPERATORS. 

 

 

print(15*2-5/2+10) 
print((12+4)+(12-4)) 
print(260/5+20*2-5) 
print(10+5*(20-5)/3) 
print(10+56-6*2/1) 
print(8*3/2-8+20) 
print((20+20)*2/5-14) 
print((5+4)**2/14) 
print(25/2+17//(2+3)**4) 
print(5%250+12+14*(15-12)) 
print(12*8-2+8*2//4%6) 
print(16*6/1-16+2) 


ARRAY 

Arrays are mainly used to store multiple values in one single variable. 

Example: cars= [“Benz”, “ford”, “BMW”] 

Array: An Array is a special variable, which can hold more than one value at a time. 

Example:  

Car1= ‘Ford” 

Car2 = “BMW” 

Car3 = “Maruthi” 

Accessing the elements of an array: 

X = cars 0] 

 

Example: 

Cars = [“Benz”, “Ford”, “BMW”] 

X = cars [0] 

Print(x) 

To find the length of an array: 

Cars = [“Benz”, “Ford”, “BMW”] 

X = cars [0] 

Print(x) 

X = len(cars) 

Print(X) 

fruits=["apple","mango","orange","banana"] 
x=fruits[0] 
print(x) 
x=len(fruits) 
print(x) 

 

OUTPUT: 

Picture 1881345477, Picture 

Looping array elements: 

Cars = [“Benz”, “Ford”, “BMW”] 

For x in cars 

Print(x) 

#looping array elements: 
fruits=["apple","mango","orange","banana"] 
for x in fruits: 
    print(x) 

 

OUTPUT: 

Picture 1302380329, Picture 

Adding element to an array; 

Append (): to add new element 

Cars = [“Benz”, “Ford”, “BMW”] 

Cars.append(“Honda”) 

Print (cars) 

Remove element from array: 

Cars = [“Benz”, “Ford”, “Honda”] 

Cars.pop(1) 

Print(cars) 

 

LIST OF ARRAY COMMANDS: 

APPEND (): Adds a new element at the end of the list. 

#adding element to an array 
fruits.append("strawberry") 
print(fruits) 

 

OUTPUT: 

Picture 1696069736, Picture 

CLEAR (): Removes all the elements from the list. 

#remove element from array 
fruits.pop(2) 
print(fruits) 

 

OUTPUT: 

Picture 1623071063, Picture 

COPY (): Returns a copy of a list. 

#copy of a list 
fruits.copy() 
print(fruits) 

 

OUTPUT: 

Picture 449412674, Picture 

COUNT (): Returns the number of elements in a specified value. 

#count 
fruits.count("mango") 
print(fruits) 

 

OUTPUT: 

Picture 1226458403, Picture 

EXTEND (): Same like append. 

INDEX (): returns the index of first element with specified value. 

#index 
fruits.index("strawberry") 
print(fruits) 

 

OUTPUT: 

Picture 795201462, Picture 

INSERT (): Adds an element at specified position. 

#insert 
fruits.insert(2,"papaya") 
print(fruits) 

 

OUTPUT: 

Picture 682346260, Picture 

POP (): Removes the element at specified position. 

REVERSE (): Reverses the order of the list. 

#reverse 
fruits.reverse() 
print(fruits) 

 

OUTPUT: 

Picture 612434886, Picture 

SORT (): Sorts the list. 

#sort 
fruits.sort() 
print(fruits) 

 

OUTPUT: 

Picture 993869055, Picture 

 FILE HANDLING		 

This file handling concept is very important part of web development. 

Python has several functions for creating and reading and updating and for deleting files. 

There are four different types of mode available. 

“r” - Read – Default value. 

Abc, “r’ 

Opens the file for reading it will throw an error if the file doesn’t exist. 

 

Print (f. Read ()) 

Read only part of the file. 

Example:  

F= open(“abc.txt”, “r”) 

Print (f.read(20)) 

Displays only first 20 characters. 

Print (f.readline()) 

 

“a” - append – open a file for appending, creating the file if it doesn’t exist. 

“w” - Write – opens a file for writing, creating the file if it doesn’t exist. 

Example: 

“x” - Create – creates a specified file, returns an error if the file is already existing. 

In addition to all the above specified modes, we have two handled modes,  

“txt” - Default value – text Mode. 

“v” - Binary mode.(e.g., Images) 

 

OPENING A FILE: This is a function to open a file. 

To open the file/ to open the function needs two parameter. 

File Name 

Hi Hello... Welcome to Cabptoid 

This is for testing the file handling concepts. 

We are undergoing for devops training. 

It's going smoother...! 

Mode 

Syntax 

Example: 

F=open (“ABC.txt”) 

Print (f. Read ()) 

Case: if the file is not in the same location. 

F = open (“D:// Files // abc.txt”, “r”) 

 

By looping through the lines of the file, you can read the whole file, line by line. 

 

Example: f= open (“abc.txt”,“r”) 

for x in f:  

print(x) 

 

CLOSING A FILE: 

To close a file after done with it. 

Example: f = open ( “abc.txt”, “r’) 

      Print ( f.read line ()) 

F.close() 

 

Writing to an already existing file: 

To write to an existing file you must add a parameter to the open function (). 

“a”: Add the new element at the end of the list. 

“w”; overwrite any existing content. 

 	F= open ( “abc.txt”, “a”) 

F= write (“I want to add new content”) 

F.close () 

Print (f. Read ()) 

 

CREATE A NEW FILE: 

T create a new file we use file open ( ) method, with any of the following combination: 

“X” - CREATE – It will create a new file, returns an error if the file exist. 

“a” - APPEND – It will create a file if the specified file doesn’t exist. 

“w’ - WRITE – It will create a file if the specified value doesn’t exist. 

Example:  

 f= open (“Demo.txt, “x”) 

 OUTPUT: A new empty file. 

 

DELETE A FILE: 

To delete a file, we must import the os module and run its command. 

Example:  

Import OS 

OS.remove (“Demo.txt, “x”) 

 

 

DELETING A FOLDER: 

Import OS  

OS.rmdir (“folder name”) 


FILE HANDLING		 

This file handling concept is very important part of web development. 

Python has several functions for creating and reading and updating and for deleting files. 

There are four different types of mode available. 

“r” - Read – Default value. 

Abc, “r’ 

Opens the file for reading it will throw an error if the file doesn’t exist. 

 

Print (f. Read ()) 

Read only part of the file. 

Example:  

F= open(“abc.txt”, “r”) 

Print (f.read(20)) 

Displays only first 20 characters. 

Print (f.readline()) 

 

“a” - append – open a file for appending, creating the file if it doesn’t exist. 

“w” - Write – opens a file for writing, creating the file if it doesn’t exist. 

Example: 

“x” - Create – creates a specified file, returns an error if the file is already existing. 

In addition to all the above specified modes, we have two handled modes,  

“txt” - Default value – text Mode. 

“v” - Binary mode.(e.g., Images) 

 

OPENING A FILE: This is a function to open a file. 

To open the file/ to open the function needs two parameter. 

File Name 

Hi Hello... Welcome to Cabptoid 

This is for testing the file handling concepts. 

We are undergoing for devops training. 

It's going smoother...! 

Mode 

Syntax 

Example: 

F=open (“ABC.txt”) 

Print (f. Read ()) 

Case: if the file is not in the same location. 

F = open (“D:// Files // abc.txt”, “r”) 

 

By looping through the lines of the file, you can read the whole file, line by line. 

 

Example: f= open (“abc.txt”,“r”) 

for x in f:  

print(x) 

 

CLOSING A FILE: 

To close a file after done with it. 

Example: f = open ( “abc.txt”, “r’) 

      Print ( f.read line ()) 

F.close() 

 

Writing to an already existing file: 

To write to an existing file you must add a parameter to the open function (). 

“a”: Add the new element at the end of the list. 

“w”; overwrite any existing content. 

 	F= open ( “abc.txt”, “a”) 

F= write (“I want to add new content”) 

F.close () 

Print (f. Read ()) 

 

CREATE A NEW FILE: 

T create a new file we use file open ( ) method, with any of the following combination: 

“X” - CREATE – It will create a new file, returns an error if the file exist. 

“a” - APPEND – It will create a file if the specified file doesn’t exist. 

“w’ - WRITE – It will create a file if the specified value doesn’t exist. 

Example:  

 f= open (“Demo.txt, “x”) 

 OUTPUT: A new empty file. 

 

DELETE A FILE: 

To delete a file, we must import the os module and run its command. 

Example:  

Import OS 

OS.remove (“Demo.txt, “x”) 

 

 

DELETING A FOLDER: 

Import OS  

OS.rmdir (“folder name”) 


LIST DATA TYPE: 

List is collection of some element. 

It consists of ordered collection of items, or elements, or data. 

List is mutable. (changeable) 

Syntax: list is represented by angular braces - “[]“ 

List allows duplicate 

List are used to store multiple items in a single variable. 

Lists are one of the 4 types of data type in a Python. 

 

List= [ 1,2,4,6,8,9, “apple”, “mango”, 2,4,6,8] 

Print(list) 

List=[12,22,32,42,"orange", "chiku", 12,22,32,42] 
print(List) 
print(len(List)) 
List[3]="apple" 
print(List) 
List[4:5]=["52"] 
print(List) 
List.remove("52") 
print(List) 
 
List=["banana", "apple", "mango",5,10,15,20,25,30] 
print(List) 
print(len(List)) 
List[8]="12" 
print(List) 
List[3:4]=["orange"] 
print(List) 
List.remove("banana") 
print(List) 
 
List=[3,6,9,12,15,18,"tomato","potato","onion"] 
print(List) 
print(len(List)) 
List[7]="21" 
print(List) 
List[5:6]=["26"] 
print(List) 
 

 

 

 

List.remove("tomato") 
print(List) 
 
List=["a","b","c","d","e",1,2,3,4,5] 
print(List) 
print(len(List)) 
List[5]="f" 
print(List) 
List[2:3]=["12"] 
print(List) 
List.remove("d") 
print(List) 
 
List=["x","y","z",9,8,7] 
print(List) 
print(len(List)) 
List[3]="10" 
print(List) 
List[4:5]=["4"] 
print(List) 
List.remove("x") 
print(List) 

OUTPUT: 

 

Picture 

Picture 

TUPLE DATA TYPE: 

It is immutable (unchangeable). 

Tuple is ordered collection of items. 

Tuple is created within the Para synthesis - ( ) 

Tuple also contains multiple data types. 

Faster access than remaining. (since it is immutable). 

Sequence operations. - Indexing, Slicing, Concatenation. 

Indexing – position of an element, 

Slicing – range of an element, 

Concatenation – addition of Strings. 

Since, tuples are immutable, we cannot update their elements directly. However, we can update it by converting it into list and we can add the items and again we can convert. 

Tuple= (1,2,3) 

List=list(tuple) 

Print(list) 

Converting back list to couple 

Tuple1 = tuple(list) 

Print(tuple1) 

We cannot delete tuple as it is immutable directly. 

Tuple=(12,24,32,44,52) 
List=list(Tuple) 
print(List) 
List[3]=30 
print(List) 
 
Tuple=("x","y","z") 
List=list(Tuple) 
print(List) 
List[0]="w" 
print(List) 
print(len(Tuple)) 
 
Tuple=(1,2,3,"apple", "orange","pineapple",1,2,3) 
List=list(Tuple) 
print(List) 
List[4]=5 
print(List) 
 
Tuple=("chocolate","ice cream", "strawberry") 
List=list(Tuple) 
print(List) 
List[2]="mango" 
print(List) 
 
Tuple=(22,23,24,25,25) 
List=list(Tuple) 
print(List) 
List[2]=26 
print(List) 
 
 
 
 
 

 

Picture 

SET DATA TYPE:  

Set is used to store multiple items in a single variable. 

Sets are unordered collection of items. 

Sets are Mutable. 

No duplicates are allowed. 

Set is represented with “Curly Braces”. 

Set1 = {“apple”, “mango”, “banana”, “kiwi”} 

Print(set1) 

Output: {“mango”, “banana”, “kiwi”, “apple”}. 

 

Set1={"x","y","z",1,2,3,4,5} 
print(Set1) 
 
Set2={12,22,32,42,52,62,72,82,92} 
print(Set2) 
 
Set3={1,5,2,6,3,8,4,9} 
print(Set3) 
 
Set4={"sun", "moon", "star",  "eclipse"} 
print(Set4) 
 
Set5={"orange",  "mango", "sugar", "coffee"} 
print(Set5) 

OUTPUT: 

Picture 

Differences between LIST, SET, and TUPLE:  

LIST 

SETS 

TUPLE 

List = [10, 12, 15] 

Set = {1,23,34} 

Print(set) - {1,23,24} 

Set = {1,1} 

Print(set) - {1} 

Tuple= (1,2,3) 

 

ACCESS:               print(list[0]) 

Print(set), 

Set elements can't be indexed 

Print(List) 

Can contains duplicate elements. 

Can't contain duplicate elements. Faster compared to lists. 

Can contains duplicate elements. Faster compared to lists. 

mutable 

mutable 

immutable 

List = [] 

Set = set() 

Words = {} 

Slicing can be done 

 

Slicing: Not done. 

Slicing can also be done on tuples 

Usage: 

Use list if you have a collection of data that doesn’t need random access. 

Membership testing and the elimination of duplicate entries. 

Use tuples when your data cannot change. 

 

 

DICTIONARY: 

Dictionary is used to store the data in the form of key value pair. 

Key: Value 

Example: Name: “Tahseen” 

      Age: “24” 

It is a collection of data in ordered form. 

It is Mutable. 

It does not allow duplicates. (keys are not duplicate values can be duplicate). 

Dictionaries re written in curly braces. “{ }” 

Dictionary is also called as updating. 

D= {“brand”: “ford”, “Model”: Mustang”, “year”: 2004} 

Print(D) 

Removing the data from the dictionary: 

D. pop (“year”) 

Print(D) 

Adding a new item to the dictionary: 

D [“color”] = “red” 

Print(D) 

 

D={"Brand":"Fastrack","Model":"Beige ladies","Year":"1998"} 
print(D) 
D.pop("Model") 
print(D) 
D["color"]="Rose" 
print(D) 
 
D={"Brand":"Ford","Model":"Mustang","Year":"2004"} 
print(D) 
D.pop("Year") 
print(D) 
D["colour"]="Red" 
print(D) 
 

 

OUTPUT: 

Picture 

CONDITIONAL STATEMENTS: 

IF: IF is used to display the output when only the condition is satisfied, and it won't display the output when condition fails to execute. 

a=30 

B=20 

If b<a 

      Print (“B is smaller than A) 

a=250 
b=50 
if b<a: 
    print("b is smaller than a") 
 
a=50 
b=100 
if b<a: 
    print("b is smaller than a") 
 
a=30 
b=30 
if b is a: 
    print(b is a) 
 
x=150 
y=250 
if b<a: 
    print("y is smaller than x") 
 

 

OUTPUT: 

Picture 

ELIF: ELIF is used when if condition fails to execute. 

A=30 

B=30 

If b<a 

Print (“B is smaller than A”) 

Elif a==b 

Print (“A and B both are Equal) 

x=50 
y=50 
if y<x: 
    print("y is smaller than x") 
elif x==y: 
    print("x and y both are equal") 
 
a="apple" 
b="apple" 
if b is not a: 
    print("b is not a") 
elif b is a: 
    print("b and a both are equal") 

 

OUTPUT: 

Picture 

ELSE: ELSE is used to perform the execution when IF and ELIF fails to execute. 

A=30 

B=300 

If b<a 

     print (“B <A) 

ELIF a==b 

Print (“A and b both are equal) 

ELSE a>b 

      print (“A is greater  than B”) 

OUTPUT: 

A is Greater Than B 

 

a=30 
b=300 
if b<a: 
    print("b is smaller than a") 
elif a==b: 
    print("a and b both are equal") 
else: 
    print("b is greater than a") 
 
 
x=250 
y=300 
if y<x: 
    print("y is smaller than x") 
elif x==y: 
    print("x and y both are equal") 
else: 
    print("y is greater than x") 

 

OUTPUT: 

Picture 

 

 

SHORTHAND IF: If you have only one statement to execute then you can put it on single Line. 

A=10 

B=20 

If a>b 

    print (“A is Greater Than B”) 

 

a=20 
b=10 
if a>b: 
    print("a is greater than b") 
 
x=80 
y=60 
if x>y: 
    print("x is greater than y") 
 
p=30 
r=60 
if p>r: 
    print("p is greater than r") 

 

OUTPUT: 

Picture 

IF ELSE:  

a=100 

B=20 

IF a>b 

     Print (“A is Greater Than B”) 

ELSE b>a 

     Print (“B is Greater Than A”) 

a=10 
b=50 
if a>b: 
    print("a is greater than b") 
else: 
    print("b is greater than a") 
 
x=30 
y=60 
if x>y: 
    print("x is greater than y") 
else: 
    print("y is greater than x") 

 

OUTPUT: 

Picture 

LOOPS: 

FOR LOOP:  

Used for iterating over a sequence of set, list, tuple, dictionary. 

For loop is used to execute a set of statements. 

Example:  

Fruits = ["apple”, “mango”, “banana”, “kiwi”, “strawberry”, ‘orange”, “grapes”] 

For i in fruits  

Print(i) 

fruits=["apple","mango","banana","kiwi","strawberry","orange","grapes"] 
for i in fruits: 
    print(i) 
#to break the iteration 
fruits=["apple","mango","banana","kiwi","strawberry","orange","grapes"] 
for i in fruits: 
    if i=="orange": 
        break 
    print(i) 
    if i=="banana": 
        continue 
    print(i) 

 

BREAK STATEMENT: to break the irritation.					 

If i== “kiwi”								 

Print(i)									 

CONTINUE STATEMENT: TO miss the statement.				 

If i == “kiwi”								 

 Print(i) 

OUTPUT: 

Picture 

RANGE FUNCTION: The range function returns a sequence of numbers starting from 0 and increment by 1 and ends at specified number. 

For i in range (10) 

Print(i) 

 

WHILE LOOP: 

Using the loop we can execute a set of statements as long as condition is true. 

I=1 

While i<10: 

Print(i) 

I+=1 

Output: 

1 

2 

3 

4 

5 

6 

7 

8 

9 

While with continue: 

Ex: i = 1 

       While i<10: 

       I+=1 

       If I ==3: 

      Continue 

      Print(i) 

   While with else: 

      Ex: i = 1 

      While i<21 

      Print(i) 

      I+=1 

      Else: 

 	       print(“i is no longer less than 20”) 
    	 
